// This file is auto-generated by @hey-api/openapi-ts

import {
	type Options,
	createClient,
	createConfig,
} from "@hey-api/client-axios";
import type {
	AddQuestionData,
	AddQuestionError,
	AddQuestionResponse2,
	CreateQuizSetData,
	CreateQuizSetError,
	CreateQuizSetResponse2,
	DeleteQuizSetData,
	DeleteQuizSetError,
	DeleteQuizSetResponse2,
	GetGroupsByQuizSetIdData,
	GetGroupsByQuizSetIdError,
	GetGroupsByQuizSetIdResponse2,
	GetGroupsError,
	GetGroupsResponse2,
	GetQuizSetBySubIdData,
	GetQuizSetBySubIdError,
	GetQuizSetBySubIdResponse,
	GetQuizSetData,
	GetQuizSetError,
	GetQuizSetResponse2,
	GetQuizSetsError,
	GetQuizSetsResponse2,
	RegisterGroupData,
	RegisterGroupError,
	RegisterGroupResponse,
	RegisterGroupWithSubIdData,
	RegisterGroupWithSubIdError,
	RegisterGroupWithSubIdResponse,
	RegisterScoreData,
	RegisterScoreError,
	RegisterScoreResponse2,
} from "./types.gen";

const baseURL = import.meta.env.VITE_API_URL;

export const client = createClient(
	createConfig({
		baseURL: baseURL,
	}),
);

/**
 * Get Quiz Sets
 * Get all quiz sets
 */
export const getQuizSets = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetQuizSetsResponse2,
		GetQuizSetsError,
		ThrowOnError
	>({
		...options,
		url: "/quiz_sets",
	});
};

/**
 * Create Quiz Set
 * Create a quiz set
 */
export const createQuizSet = <ThrowOnError extends boolean = false>(
	options: Options<CreateQuizSetData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		CreateQuizSetResponse2,
		CreateQuizSetError,
		ThrowOnError
	>({
		...options,
		url: "/quiz_sets",
	});
};

/**
 * Get Quiz Set
 * Get a quiz set by ID
 */
export const getQuizSet = <ThrowOnError extends boolean = false>(
	options: Options<GetQuizSetData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetQuizSetResponse2,
		GetQuizSetError,
		ThrowOnError
	>({
		...options,
		url: "/quiz_sets/{quiz_set_id}",
	});
};

/**
 * Delete Quiz Set
 * Delete a quiz set by ID
 */
export const deleteQuizSet = <ThrowOnError extends boolean = false>(
	options: Options<DeleteQuizSetData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteQuizSetResponse2,
		DeleteQuizSetError,
		ThrowOnError
	>({
		...options,
		url: "/quiz_sets/{quiz_set_id}",
	});
};

/**
 * Get Quiz Set By Sub Id
 * Get a quiz set by sub ID
 */
export const getQuizSetBySubId = <ThrowOnError extends boolean = false>(
	options: Options<GetQuizSetBySubIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetQuizSetBySubIdResponse,
		GetQuizSetBySubIdError,
		ThrowOnError
	>({
		...options,
		url: "/quiz_sets/sub_id/{sub_id}",
	});
};

/**
 * Add Question
 * Add a question to a quiz set
 */
export const addQuestion = <ThrowOnError extends boolean = false>(
	options: Options<AddQuestionData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		AddQuestionResponse2,
		AddQuestionError,
		ThrowOnError
	>({
		...options,
		url: "/question/{quiz_set_id}",
	});
};

/**
 * Get Groups
 * Get all groups
 */
export const getGroups = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGroupsResponse2,
		GetGroupsError,
		ThrowOnError
	>({
		...options,
		url: "/groups",
	});
};

/**
 * Get Groups By Quiz Set Id
 * Get all groups by quiz set ID
 */
export const getGroupsByQuizSetId = <ThrowOnError extends boolean = false>(
	options: Options<GetGroupsByQuizSetIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetGroupsByQuizSetIdResponse2,
		GetGroupsByQuizSetIdError,
		ThrowOnError
	>({
		...options,
		url: "/groups/{quiz_set_id}",
	});
};

/**
 * Register Group
 * Register a group
 */
export const registerGroup = <ThrowOnError extends boolean = false>(
	options: Options<RegisterGroupData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RegisterGroupResponse,
		RegisterGroupError,
		ThrowOnError
	>({
		...options,
		url: "/groups/{quiz_set_id}",
	});
};

/**
 * Register Score
 * Register a score
 */
export const registerScore = <ThrowOnError extends boolean = false>(
	options: Options<RegisterScoreData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		RegisterScoreResponse2,
		RegisterScoreError,
		ThrowOnError
	>({
		...options,
		url: "/groups/{group_id}",
	});
};

/**
 * Register Group With Sub Id
 * Register a group with quiz set sub ID
 */
export const registerGroupWithSubId = <ThrowOnError extends boolean = false>(
	options: Options<RegisterGroupWithSubIdData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		RegisterGroupWithSubIdResponse,
		RegisterGroupWithSubIdError,
		ThrowOnError
	>({
		...options,
		url: "/groups/sub_id/{quiz_set_sub_id}",
	});
};
